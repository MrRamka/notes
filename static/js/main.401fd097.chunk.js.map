{"version":3,"sources":["types/language.ts","theme/themes.ts","components/CardModal/CardModal.tsx","components/CardForm/CardForm.tsx","components/Input/Input.tsx","components/Input/TextArea.tsx","components/DeleteConfirmModal/DeleteConfirmModal.tsx","components/AddCard/AddCardModal.tsx","components/AddCard/styles.ts","components/AddCard/AddCard.tsx","redux-store/adReducer/actions.ts","components/AdBlock/AdBlock.tsx","theme-context.ts","components/CardModal/index.ts","components/AddCard/index.ts","components/ThemeTypography/styles.ts","components/ThemeTypography/ThemeTypography.tsx","components/Header/styles.ts","components/Header/Header.tsx","components/Column/styles.ts","components/Card/styles.ts","components/EditModalConfirm/EditModalConfirm.tsx","components/Card/Card.tsx","components/Column/Column.tsx","components/AddNewColumn/AddColumnModal.tsx","components/AddNewColumn/styles.ts","components/AddNewColumn/AddNewColumn.tsx","components/NotesContainer/NotesContainer.tsx","components/MainPage/MainPage.tsx","App.tsx","reportWebVitals.ts","i18n.ts","store.ts","index.tsx","redux-store/listReduser/types.ts","redux-store/listReduser/actions.ts","components/Modal/styles.ts","components/CloseButton/styles.ts","components/CloseButton/CloseButton.tsx","components/Buttons/styles.ts","components/Buttons/Button.tsx","components/Modal/Modal.tsx","redux-store/adReducer/types.ts","components/AdBlock/index.ts","redux-store/selectors.ts","redux-store/listReduser/reducer.ts","redux-store/adReducer/reducer.ts","redux-store/rootReducer.ts","utils/uuid.ts","utils/random.ts","components/Input/styles.ts","types/index.ts","components/Input/index.ts","components/AdBlock/styles.ts","components/CardForm/index.ts","components/DeleteConfirmModal/index.ts","theme/index.ts"],"names":["LanguageCode","LanguageName","LanguageNameShort","languageNameDict","ENGLISH","RUSSIAN","languageShortNameDict","LANGUAGES","getLanguageNameByCode","code","has","console","log","getLanguageShortNameByCode","lightTheme","background","error","secondary_variant","on_error","on_primary","on_secondary","on_surface","primary","primary_variant","secondary","surface","column","card","darkTheme","CardModal","props","onCancel","cardTitle","cardDescription","setCardDescription","setCardTitle","useState","isOpen","setIsOpen","dispatch","useDispatch","t","useTranslation","handleCloseCardModal","useCallback","handleTitleInputChange","event","target","value","handleDescriptionInputChange","handleSaveCard","updatedCard","id","columnId","title","description","updateCard","onClose","onOk","setOpen","header","onCloseText","onOkText","onDescriptionChange","onInputChange","titleValue","descriptionValue","CardForm","titleLabel","descriptionLabel","onChange","name","label","Input","rules","handleInputChange","themeContext","useContext","ThemeContext","htmlFor","color","theme","borderColor","backgroundcolor","defaultValue","size","TextArea","rowsMin","DeleteConfirmModal","children","e","AddCardModal","handleSave","uuid","uuidv4","addCard","Modal","AdBlock","loadingType","CardWrapper","styled","div","AddCard","handleClick","Link","onClick","ThemeTypography","loadingAd","loading","payload","type","AdActionType","LOADING","addAdFunction","getState","ads","adReducer","arrMaxLength","END_AD_ID","length","REMOVE_ADS","isExistId","find","ad","randomId","getRandomInt","START_AD_ID","axios","get","then","result","setTimeout","data","ADD_AD","UPDATE_DISPLAYED_AD","updateDisplayedAd","useSelector","selectors","adLoading","displayed","useEffect","iconColor","themes","light","dark","React","createContext","toggleTheme","setTheme","autoThemeChange","StyledTypography","Typography","text_color","className","styles","context","style","AppHeaderBar","AppBar","bgColor","AutoThemeCheckBox","Checkbox","useStyles","makeStyles","createStyles","flexGrow","Header","i18n","classes","currentLanguage","setCurrentLanguage","onLanguageChange","changeLanguage","position","Toolbar","FormControlLabel","control","Switch","Select","map","MenuItem","ColumnPaper","Paper","ColumnWrapper","ColumnTitle","ThemeDeleteIcon","DeleteIcon","delete_color","HeaderWrapper","Card","MaterialCard","themecolor","CardTitle","CardContent","MaterialCardContent","ThemeCardTypography","ClearIcon","DeleteCardWrapper","EditModalConfirm","marginBottom","spacing","fontWeight","display","modalOpen","setModalOpen","deleteModalOpen","setDeleteModalOpen","editModalOpen","setEditModalOpen","isChangedData","setIsChangedData","shortDescriptionValue","substring","useDrag","item","collect","monitor","isDragging","drag","handleCardClick","handleDeleteCard","stopPropagation","handleCancelDelete","onDeleteModal","deleteCard","handleCancelEdit","handleOkEdit","handleCancelOpen","ref","Column","cards","useDrop","accept","isOver","canDrop","drop","getItem","updateCardColumn","handleDeleteColumn","deleteColumn","elevation","AddColumnModal","columnTitle","setColumnTitle","newColumn","addColumn","AddCardWrapper","AddNewColumn","NotesContainer","columns","list","columnList","DndProvider","backend","HTML5Backend","MainPage","wrapperStyles","backgroundColor","height","width","top","overflowX","marginTop","App","themeState","setThemeState","toggleThemeHandler","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","use","Backend","LanguageDetector","initReactI18next","init","lng","detection","order","cache","debug","interpolation","escapeValue","persistConfig","key","storage","persistedReducers","persistReducer","rootReducer","middlewares","logger","thunk","store","createStore","applyMiddleware","persistor","persistStore","ReactDOM","render","StrictMode","fallback","document","getElementById","ListActionType","UPDATE_CARD","ADD_NEW_COLUMN","ADD_NEW_CARD","updateCardColumnType","UPDATE_CARD_COLUMN","DELETE_COLUMN","cardId","DELETE_CARD","ModalShadow","ModalWrapper","Content","Footer","CloseButtonWrapper","span","themeColor","CloseButton","StyledButton","Button","buttonColor","btnColor","variant","handleClose","handleSubmit","createPortal","body","state","listReducer","adList","initialState","combineReducers","action","newList","newCards","prevColumnId","filter","changedCard","filteredColumns","columnsFiltered","replace","c","r","Math","random","toString","min","max","ceil","floor","StyledInput","input","StyledTextArea","TextareaAutosize","StyledLabel","Wrapper","keyFrames","keyframes","LoadingIcon","AutorenewIcon"],"mappings":"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","file":"static/js/main.401fd097.chunk.js","sourcesContent":["import { has } from 'lodash';\r\n\r\nexport enum LanguageCode {\r\n    ENGLISH = 0,\r\n    RUSSIAN = 1\r\n}\r\n\r\nexport enum LanguageName {\r\n    ENGLISH = 'English',\r\n    RUSSIAN = 'Russian'\r\n}\r\n\r\nexport enum LanguageNameShort {\r\n    ENGLISH = 'en',\r\n    RUSSIAN = 'ru'\r\n}\r\n\r\nexport const languageNameDict = {\r\n    [LanguageCode.ENGLISH]: LanguageName.ENGLISH,\r\n    [LanguageCode.RUSSIAN]: LanguageName.RUSSIAN,\r\n};\r\n\r\nexport const languageShortNameDict = {\r\n    [LanguageCode.ENGLISH]: LanguageNameShort.ENGLISH,\r\n    [LanguageCode.RUSSIAN]: LanguageNameShort.RUSSIAN,\r\n};\r\n\r\n\r\nexport const LANGUAGES = [LanguageCode.ENGLISH, LanguageCode.RUSSIAN];\r\n\r\nexport function getLanguageNameByCode(code: LanguageCode): LanguageName | null {\r\n    if (!has(languageNameDict, code)) {\r\n        console.log('Unexpected Language Code');\r\n        return null;\r\n    }\r\n    return languageNameDict[code];\r\n}\r\n\r\nexport function getLanguageShortNameByCode(code: LanguageCode): LanguageNameShort | null {\r\n    if (!has(languageShortNameDict, code)) {\r\n        console.log('Unexpected Language Code');\r\n        return null;\r\n    }\r\n    return languageShortNameDict[code];\r\n}\r\n\r\n","import { ThemeFields } from './type';\r\n\r\nexport const lightTheme: ThemeFields = {\r\n    background: '#f7f9fd',\r\n    error: '#B00020',\r\n    secondary_variant: '#018786',\r\n    on_error: '#FFFFFF',\r\n    on_primary: '#FFFFFF',\r\n    on_secondary: '#000000',\r\n    on_surface: '#001f6f',\r\n    primary: '#6200EE',\r\n    primary_variant: '#6200EE',\r\n    secondary: '#03DAC6',\r\n    surface: '#FFFFFF',\r\n    column: '#e3e7f0',\r\n    card: '#FFFFFF',\r\n};\r\n\r\nexport const darkTheme: ThemeFields = {\r\n    background: '#1c1e23',\r\n    error: '#CF6679',\r\n    secondary_variant: '#03DAC6',\r\n    on_error: '#000000',\r\n    on_primary: '#000000',\r\n    on_secondary: '#000000',\r\n    on_surface: '#cecfb7',\r\n    primary: '#BB86FC',\r\n    primary_variant: '#cecfb7',\r\n    secondary: '#03DAC6',\r\n    surface: '#30343d',\r\n    column: '#30343d',\r\n    card: '#3e424e',\r\n};\r\n","import React, { ChangeEvent, FC, useCallback, useState } from 'react';\r\nimport { Modal } from '../Modal';\r\nimport { CardType } from '../../types';\r\nimport { CardForm } from '../CardForm';\r\nimport { useDispatch } from 'react-redux';\r\nimport { updateCard } from '../../redux-store/listReduser/actions';\r\nimport { CardModalTypes } from './types';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport const CardModal: FC<CardModalTypes> = (props) => {\r\n\r\n    const { card, onCancel, cardTitle, cardDescription, setCardDescription, setCardTitle } = props;\r\n\r\n    const [isOpen, setIsOpen] = useState<boolean>(true);\r\n\r\n    const dispatch = useDispatch();\r\n    const { t } = useTranslation();\r\n\r\n    const handleCloseCardModal = useCallback(() => {\r\n        setIsOpen(false);\r\n        onCancel();\r\n    }, [setIsOpen, onCancel]);\r\n\r\n    const handleTitleInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n        setCardTitle(event.target.value);\r\n    }, [setCardTitle]);\r\n\r\n    const handleDescriptionInputChange = useCallback((event: ChangeEvent<HTMLTextAreaElement>) => {\r\n        setCardDescription(event.target.value);\r\n    }, [setCardDescription]);\r\n\r\n    const handleSaveCard = useCallback(() => {\r\n        const updatedCard: CardType = {\r\n            id: card.id,\r\n            columnId: card.columnId,\r\n            title: cardTitle,\r\n            description: cardDescription,\r\n        };\r\n\r\n        dispatch(updateCard(updatedCard));\r\n    }, [card, cardDescription, cardTitle, dispatch]);\r\n\r\n    return (\r\n        <>\r\n            {isOpen &&\r\n            <Modal\r\n                onClose={handleCloseCardModal}\r\n                onOk={handleSaveCard}\r\n                setOpen={setIsOpen}\r\n                header={t('editCard')}\r\n                onCloseText={t('cancelText')}\r\n                onOkText={t('okText')}\r\n            >\r\n                <CardForm\r\n                    onDescriptionChange={handleDescriptionInputChange}\r\n                    onInputChange={handleTitleInputChange}\r\n                    titleValue={cardTitle}\r\n                    descriptionValue={cardDescription}\r\n                />\r\n            </Modal>\r\n            }\r\n        </>\r\n    );\r\n};\r\n","import React, { FC, useCallback } from 'react';\r\nimport { CardFormProps } from './types';\r\nimport { Input, TextArea } from '../Input';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport const CardForm: FC<CardFormProps> = (props) => {\r\n\r\n    const { t } = useTranslation();\r\n\r\n    const { onInputChange,\r\n        onDescriptionChange,\r\n        titleLabel = t('cardTitle'),\r\n        descriptionLabel = t('cardDescription'),\r\n        onOk,\r\n        descriptionValue,\r\n        titleValue\r\n    } = props;\r\n\r\n    const onOkFunction = useCallback(() => {\r\n        onOk?.();\r\n    }, [onOk]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <Input onChange={onInputChange} name='title' label={titleLabel} value={titleValue}/>\r\n            <TextArea onChange={onDescriptionChange}  name='description' label={descriptionLabel} value={descriptionValue}/>\r\n        </>\r\n    );\r\n};\r\n","import React, { ChangeEvent, FC, useCallback, useContext } from 'react';\r\nimport { StyledInput, StyledLabel, Wrapper } from './styles';\r\nimport { InputType } from './types';\r\nimport { ThemeContext } from '../../theme-context';\r\nimport { ThemeTypography } from '../ThemeTypography';\r\n\r\nconst INPUT_SIZE = 35;\r\n\r\nexport const Input: FC<InputType> = (props) => {\r\n\r\n    const { onChange, name, label, rules, value = '' } = props;\r\n\r\n\r\n    const handleInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n        onChange(event);\r\n\r\n        //Rules\r\n\r\n    }, [onChange]);\r\n\r\n    const themeContext = useContext(ThemeContext);\r\n\r\n    return (\r\n        <Wrapper>\r\n            <StyledLabel\r\n                htmlFor={name}\r\n                color={themeContext.theme.primary}\r\n            >\r\n                <ThemeTypography>{label}</ThemeTypography>\r\n            </StyledLabel>\r\n            <StyledInput\r\n                borderColor={themeContext.theme.on_surface}\r\n                backgroundcolor={themeContext.theme.surface}\r\n                color={themeContext.theme.on_surface}\r\n                name={name}\r\n                onChange={handleInputChange}\r\n                defaultValue={value}\r\n                size={INPUT_SIZE}\r\n            />\r\n        </Wrapper>\r\n    );\r\n};\r\n","import React, { FC, useContext } from 'react';\r\nimport { TextAreaType } from './types';\r\nimport { ThemeTypography } from '../ThemeTypography';\r\nimport { StyledLabel, StyledTextArea } from './styles';\r\nimport { ThemeContext } from '../../theme-context';\r\n\r\nexport const TextArea: FC<TextAreaType> = (props) => {\r\n\r\n    const { onChange, name, label, rules, value = '' } = props;\r\n\r\n    const themeContext = useContext(ThemeContext);\r\n\r\n    return (\r\n        <>\r\n            <StyledLabel\r\n                htmlFor={name}\r\n                color={themeContext.theme.primary}\r\n            >\r\n                <ThemeTypography>{label}</ThemeTypography>\r\n            </StyledLabel>\r\n            <StyledTextArea\r\n                defaultValue={value}\r\n                onChange={onChange}\r\n                borderColor={themeContext.theme.on_surface}\r\n                backgroundcolor={themeContext.theme.surface}\r\n                color={themeContext.theme.on_surface}\r\n                rowsMin={2}\r\n            />\r\n        </>\r\n    );\r\n};\r\n","import React, { FC, useCallback } from 'react';\r\nimport { DeleteConfirmModalProps } from './types';\r\nimport { Modal } from '../Modal';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport const DeleteConfirmModal: FC<DeleteConfirmModalProps> = (props) => {\r\n\r\n    const { onOk, onCancel, children, setIsOpen } = props;\r\n\r\n    const { t } = useTranslation();\r\n\r\n    const handleCloseCardModal = useCallback((e: React.MouseEvent<HTMLElement>) => {\r\n        setIsOpen(false);\r\n        onCancel(e);\r\n    }, [setIsOpen, onCancel]);\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                onClose={handleCloseCardModal}\r\n                onOk={onOk}\r\n                setOpen={setIsOpen}\r\n                header={t('deleteColumnModalTitle')}\r\n                onCloseText={t('cancelText')}\r\n                onOkText={t('okText')}\r\n            >\r\n                {children}\r\n            </Modal>\r\n\r\n        </>\r\n    );\r\n};\r\n","import React, { ChangeEvent, FC, useCallback, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { uuidv4 } from '../../utils';\r\nimport { CardType } from '../../types';\r\nimport { addCard } from '../../redux-store/listReduser/actions';\r\nimport { Modal } from '../Modal';\r\nimport { CardForm } from '../CardForm';\r\nimport { AdBlock } from '../AdBlock';\r\nimport { AddCardModalType } from './types';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n\r\nexport const AddCardModal: FC<AddCardModalType> = ({ setIsOpen, columnId }) => {\r\n    const dispatch = useDispatch();\r\n    const { t } = useTranslation();\r\n\r\n    const [cardTitle, setCardTitle] = useState<string>('');\r\n    const [cardDescription, setCardDescription] = useState<string>('');\r\n\r\n    const handleSave = useCallback(() => {\r\n        const uuid: string = uuidv4();\r\n        const card: CardType = {\r\n            description: cardDescription,\r\n            id: uuid,\r\n            title: cardTitle,\r\n            columnId: columnId,\r\n        };\r\n        dispatch(addCard(card));\r\n    }, [cardTitle, cardDescription, columnId, dispatch]);\r\n\r\n    const onInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n        setCardTitle(event.target.value);\r\n    }, []);\r\n\r\n    const onDescriptionChange = useCallback((event: ChangeEvent<HTMLTextAreaElement>) => {\r\n        setCardDescription(event.target.value);\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                setOpen={setIsOpen}\r\n                onCloseText={t('cancelText')}\r\n                onOkText={t('addCardModalOkText')}\r\n                onOk={handleSave}\r\n                header={t('addCardModalHeader')}\r\n            >\r\n                <CardForm onInputChange={onInputChange} onDescriptionChange={onDescriptionChange} />\r\n                <AdBlock loadingType={false} />\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const CardWrapper = styled.div`\r\n  cursor: pointer;\r\n`;\r\n","import React, { FC, useCallback, useState } from 'react';\r\nimport { ThemeTypography } from '../ThemeTypography';\r\nimport { Link } from '@material-ui/core';\r\nimport { AddCardModal } from './AddCardModal';\r\nimport { CardWrapper } from './styles';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { AddCardProps } from './types';\r\n\r\n\r\nexport const AddCard: FC<AddCardProps> = ({ columnId }) => {\r\n    const [isOpen, setIsOpen] = useState<boolean>(false);\r\n\r\n    const { t } = useTranslation();\r\n\r\n    const handleClick = useCallback(() => {\r\n        setIsOpen(true);\r\n    }, []);\r\n\r\n    return (\r\n        <CardWrapper>\r\n            <Link onClick={handleClick}><ThemeTypography>{t('addNewCard')}</ThemeTypography></Link>\r\n            {isOpen && <AddCardModal setIsOpen={setIsOpen} columnId={columnId} />}\r\n        </CardWrapper>\r\n    );\r\n};\r\n","import { Action, Dispatch } from 'redux';\r\nimport axios from 'axios';\r\nimport { AdActionType } from './types';\r\nimport { AdType } from './reducer';\r\nimport { RootState } from '../rootReducer';\r\nimport { getRandomInt } from '../../utils';\r\nimport { END_AD_ID, START_AD_ID } from '../../components/AdBlock';\r\n\r\nexport interface AddAdAction extends Action<AdActionType.ADD_AD> {\r\n    payload: AdType;\r\n}\r\n\r\nexport const addAd = (ad: AdType): AddAdAction => ({\r\n    payload: ad,\r\n    type: AdActionType.ADD_AD,\r\n});\r\n\r\nexport interface LoadingAdAction extends Action<AdActionType.LOADING> {\r\n    payload: boolean;\r\n}\r\n\r\nexport const loadingAd = (loading: boolean): LoadingAdAction => ({\r\n    payload: loading,\r\n    type: AdActionType.LOADING,\r\n});\r\n\r\nexport interface RemoveAdsAction extends Action<AdActionType.REMOVE_ADS> {\r\n}\r\n\r\nexport const removeAds = (): RemoveAdsAction => ({\r\n    type: AdActionType.REMOVE_ADS,\r\n});\r\n\r\nexport interface UpdateDisplayedAdAction extends Action<AdActionType.UPDATE_DISPLAYED_AD> {\r\n    payload: AdType;\r\n}\r\n\r\nexport const updateDisplayedAd = (ad: AdType): UpdateDisplayedAdAction => ({\r\n    payload: ad,\r\n    type: AdActionType.UPDATE_DISPLAYED_AD,\r\n});\r\n\r\n\r\nexport const addAdFunction = () => {\r\n    return (dispatch: Dispatch, getState: () => RootState) => {\r\n        dispatch(loadingAd(true));\r\n\r\n        let ads = getState().adReducer.ads;\r\n\r\n        const arrMaxLength = END_AD_ID - 1;\r\n\r\n        if (ads.length === arrMaxLength) {\r\n            dispatch(removeAds());\r\n            //update state\r\n            ads = [];\r\n        }\r\n\r\n        const isExistId = (id: number): boolean => {\r\n            return !!ads.find((ad) => ad.id === id);\r\n        };\r\n        let randomId = getRandomInt(START_AD_ID, END_AD_ID);\r\n        while (isExistId(randomId)) {\r\n            randomId = getRandomInt(START_AD_ID, END_AD_ID);\r\n        }\r\n\r\n        axios\r\n            .get(`https://jsonplaceholder.typicode.com/todos/${randomId}`)\r\n            .then(result =>\r\n                setTimeout(() => {\r\n                    dispatch(addAd(result.data));\r\n                    dispatch(updateDisplayedAd(result.data));\r\n                    dispatch(loadingAd(false));\r\n                }, 1500));\r\n\r\n\r\n    };\r\n};\r\n","import React, { FC, useContext, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addAdFunction } from '../../redux-store/adReducer/actions';\r\nimport { selectors } from '../../redux-store';\r\nimport { AdBlockType } from './types';\r\nimport { ThemeTypography } from '../ThemeTypography';\r\nimport { ThemeContext } from '../../theme-context';\r\nimport { LoadingIcon } from './styles';\r\n\r\nexport const START_AD_ID = 1;\r\nexport const END_AD_ID = 5;\r\n\r\nexport const AdBlock: FC<AdBlockType> = ({ loadingType = true }) => {\r\n\r\n\r\n    const loading = useSelector(selectors.ad.adLoading);\r\n    const ad = useSelector(selectors.ad.displayed);\r\n\r\n    const themeContext = useContext(ThemeContext);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (loadingType) {\r\n            dispatch(addAdFunction());\r\n        }\r\n    }, [dispatch, loadingType]);\r\n\r\n    return (\r\n        <>\r\n            {!loading && ad &&\r\n            <div>\r\n                <ThemeTypography>{ad.id}: {ad.title}</ThemeTypography>\r\n            </div>}\r\n            {loading && loadingType && <LoadingIcon iconColor={themeContext.theme.on_surface} />}\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { darkTheme, lightTheme, ThemeFields, ThemeType } from './theme';\r\n\r\nexport const themes: ThemeType = {\r\n    light: lightTheme,\r\n    dark: darkTheme,\r\n};\r\n\r\nexport const ThemeContext = React.createContext({\r\n    theme: themes.dark,\r\n    toggleTheme: () => {},\r\n    setTheme: (theme: ThemeFields) => {},\r\n    autoThemeChange: true,\r\n});\r\n","export * from './CardModal';\r\nexport * from './types';\r\n","export * from './AddCard';\r\nexport * from './types';\r\n","import styled from 'styled-components';\r\nimport { Typography } from '@material-ui/core';\r\n\r\ntype Props = {\r\n    text_color: string\r\n}\r\n\r\nexport const StyledTypography = styled(Typography)<Props>`\r\n  color: ${props => props.text_color};\r\n  display: inline-block;\r\n`;\r\n","import React, { CSSProperties, FC, useContext } from 'react';\r\nimport { StyledTypography } from './styles';\r\nimport { ThemeContext } from '../../theme-context';\r\n\r\ntype ThemeTypographyProps = {\r\n    className?: string\r\n    styles?: CSSProperties\r\n}\r\n\r\nexport const ThemeTypography: FC<ThemeTypographyProps> = ({ children, className, styles }) => {\r\n\r\n    const context = useContext(ThemeContext);\r\n\r\n    return (\r\n        <StyledTypography text_color={context.theme.on_surface} className={className} style={styles}>\r\n            {children}\r\n        </StyledTypography>\r\n    );\r\n};\r\n","import styled from 'styled-components';\r\nimport { AppBar } from '@material-ui/core';\r\nimport { AppHeaderBarProps, AutoThemeCheckBoxProps } from './types';\r\nimport { Checkbox } from '@material-ui/core';\r\n\r\nexport const AppHeaderBar = styled(AppBar)<AppHeaderBarProps>`\r\n  background-color: ${props => props.bgColor};\r\n`;\r\n\r\nexport const AutoThemeCheckBox = styled(Checkbox)<AutoThemeCheckBoxProps>`\r\n  color: ${props => props.bgColor};\r\n`;\r\n\r\n\r\n","import React, { FC, useCallback, useContext, useState } from 'react';\r\nimport {\r\n    createStyles,\r\n    FormControlLabel,\r\n    makeStyles,\r\n    MenuItem,\r\n    Select,\r\n    Switch,\r\n    Theme,\r\n    Toolbar,\r\n} from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { getLanguageNameByCode, getLanguageShortNameByCode, LanguageNameShort, LANGUAGES } from '../../types';\r\nimport { ThemeContext } from '../../theme-context';\r\nimport { ThemeTypography } from '../ThemeTypography';\r\nimport { AppHeaderBar, AutoThemeCheckBox } from './styles';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        title: {\r\n            flexGrow: 1,\r\n        },\r\n    }),\r\n);\r\n\r\nexport const Header: FC = () => {\r\n\r\n    const { t, i18n } = useTranslation();\r\n    const classes = useStyles();\r\n    const [currentLanguage, setCurrentLanguage] = useState<LanguageNameShort>(LanguageNameShort.ENGLISH);\r\n\r\n    const themeContext = useContext(ThemeContext);\r\n\r\n    const onLanguageChange = useCallback((event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setCurrentLanguage(event.target.value as LanguageNameShort);\r\n        i18n.changeLanguage(event.target.value as string);\r\n    }, [i18n]);\r\n\r\n    return (\r\n\r\n        <AppHeaderBar position='fixed' bgColor={themeContext.theme.surface}>\r\n            <Toolbar>\r\n                <ThemeTypography className={classes.title}>\r\n                    {t('title')}\r\n                </ThemeTypography>\r\n\r\n                <FormControlLabel\r\n                    control={<AutoThemeCheckBox name='autoSwitchTheme' bgColor={themeContext.theme.on_surface} />}\r\n                    label={\r\n                        <ThemeTypography>\r\n                            {t('auto_change_theme')}\r\n                        </ThemeTypography>\r\n                    }\r\n                />\r\n\r\n                <FormControlLabel\r\n                    control={<Switch name='themeControl' onClick={themeContext.toggleTheme} />}\r\n                    label={\r\n                        <ThemeTypography>{\r\n                            t('change_theme')}\r\n                        </ThemeTypography>}\r\n                />\r\n\r\n                <Select value={currentLanguage} onChange={onLanguageChange}>\r\n                    {LANGUAGES.map((value) => (\r\n                        <MenuItem value={getLanguageShortNameByCode(value) ?? LanguageNameShort.ENGLISH}\r\n                                  key={value}>\r\n                            <ThemeTypography>\r\n                                {getLanguageNameByCode(value)}\r\n                            </ThemeTypography>\r\n                        </MenuItem>),\r\n                    )}\r\n                </Select>\r\n            </Toolbar>\r\n        </AppHeaderBar>\r\n\r\n    );\r\n};\r\n","import styled from 'styled-components';\r\nimport { Paper } from '@material-ui/core';\r\nimport { ThemeTypography } from '../ThemeTypography';\r\nimport { ColumnPaperProps, DeleteIconProps } from './types';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nexport const ColumnPaper = styled(Paper)<ColumnPaperProps>`\r\n  padding: 1rem;\r\n  background-color: ${props => props.bgColor};\r\n`;\r\n\r\nexport const ColumnWrapper = styled.div`\r\n  flex-shrink: 0;\r\n  margin: 0 0.7rem;\r\n  width: 300px;\r\n`;\r\n\r\nexport const ColumnTitle = styled(ThemeTypography)`\r\n  margin-bottom: 1rem;\r\n  font-size: 1.2rem;\r\n`;\r\n\r\nexport const ThemeDeleteIcon = styled(DeleteIcon)<DeleteIconProps>`\r\n  color: ${props => props.delete_color};\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const HeaderWrapper = styled.div`\r\n  display: flex; \r\n  justify-content: space-between;\r\n`;\r\n","import styled from 'styled-components';\r\nimport { Card as MaterialCard, CardContent as MaterialCardContent } from '@material-ui/core';\r\nimport { CardStylesProps } from './types';\r\nimport { ThemeTypography } from '../ThemeTypography';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport { DeleteIconProps } from '../Column/types';\r\n\r\nexport const Card = styled(MaterialCard)<CardStylesProps>`\r\n  background-color: ${props => props.themecolor};\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const CardTitle = styled(ThemeTypography)`\r\n  display: block;\r\n`;\r\n\r\nexport const CardContent = styled(MaterialCardContent)`\r\n  width: 240px;\r\n`;\r\n\r\nexport const ThemeCardTypography = styled(ThemeTypography)`\r\n  word-break: break-all;\r\n`;\r\n\r\nexport const ThemeDeleteIcon = styled(ClearIcon)<DeleteIconProps>`\r\n  color: ${props => props.delete_color};\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const DeleteCardWrapper = styled.div`\r\n  float: right;\r\n  padding: 0.2rem;\r\n`;\r\n","import React, { FC, useCallback } from 'react';\r\nimport { EditModalConfirmProps } from './types';\r\nimport { Modal } from '../Modal';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport const EditModalConfirm : FC<EditModalConfirmProps> = (props) => {\r\n\r\n    const { onOk, onCancel, children, setIsOpen } = props;\r\n    const { t } = useTranslation();\r\n\r\n    const handleCloseCardModal = useCallback((e: React.MouseEvent<HTMLElement>) => {\r\n        setIsOpen(false);\r\n        onCancel(e);\r\n    }, [setIsOpen, onCancel]);\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                onClose={handleCloseCardModal}\r\n                onOk={onOk}\r\n                setOpen={setIsOpen}\r\n                header={t('editCard')}\r\n                onCloseText={t('cancelText')}\r\n                onOkText={t('okText')}\r\n            >\r\n                {children}\r\n            </Modal>\r\n\r\n        </>\r\n    );\r\n}\r\n","import React, { FC, useCallback, useContext, useEffect, useState } from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core';\r\nimport {\r\n    Card as ThemedCard,\r\n    CardContent,\r\n    CardTitle,\r\n    DeleteCardWrapper,\r\n    ThemeCardTypography,\r\n    ThemeDeleteIcon,\r\n} from './styles';\r\nimport { CardModal } from '../CardModal';\r\nimport { ThemeContext } from '../../theme-context';\r\nimport { CardProps } from './types';\r\nimport { ThemeTypography } from '../ThemeTypography';\r\nimport { useDrag } from 'react-dnd';\r\nimport { deleteCard } from '../../redux-store/listReduser/actions';\r\nimport { useDispatch } from 'react-redux';\r\nimport { DeleteConfirmModal } from '../DeleteConfirmModal';\r\nimport { EditModalConfirm } from '../EditModalConfirm';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        card: {\r\n            marginBottom: theme.spacing(1),\r\n        },\r\n        title: {\r\n            fontWeight: 'bold',\r\n            display: 'block',\r\n        },\r\n    }),\r\n);\r\n\r\nconst DESCRIPTION_ELLIPSIS_LENGTH: number = 100;\r\n\r\nexport const Card: FC<CardProps> = ({ card, columnId }) => {\r\n\r\n    const classes = useStyles();\r\n    const theme = useContext(ThemeContext);\r\n    const { t } = useTranslation();\r\n\r\n    const [modalOpen, setModalOpen] = useState<boolean>(false);\r\n    const [deleteModalOpen, setDeleteModalOpen] = useState<boolean>(false);\r\n    const [editModalOpen, setEditModalOpen] = useState<boolean>(false);\r\n    const [isChangedData, setIsChangedData] = useState<boolean>(false);\r\n    const [cardTitle, setCardTitle] = useState<string>(card.title);\r\n    const [cardDescription, setCardDescription] = useState<string>(card.description || '');\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const shortDescriptionValue = (card.description?.length ?? 0) > DESCRIPTION_ELLIPSIS_LENGTH ?\r\n        card.description?.substring(0, DESCRIPTION_ELLIPSIS_LENGTH) + '...' :\r\n        card.description;\r\n\r\n    useEffect(() => {\r\n        if (cardTitle !== card.title || cardDescription !== card.description) {\r\n            setIsChangedData(true);\r\n        } else {\r\n            setIsChangedData(false);\r\n        }\r\n    }, [cardTitle, card, cardDescription]);\r\n\r\n    const [, drag] = useDrag({\r\n        item: { ...card, type: '1' },\r\n        collect: (monitor) => ({\r\n            isDragging: monitor.isDragging(),\r\n        }),\r\n    });\r\n\r\n\r\n    const handleCardClick = useCallback(() => {\r\n        setModalOpen(!modalOpen);\r\n    }, [modalOpen]);\r\n\r\n    const handleDeleteCard = useCallback((e: React.MouseEvent<SVGSVGElement, MouseEvent>) => {\r\n        e.stopPropagation();\r\n        setDeleteModalOpen(true);\r\n    }, []);\r\n\r\n    const handleCancelDelete = useCallback(() => {\r\n        setDeleteModalOpen(false);\r\n    }, []);\r\n\r\n\r\n    const onDeleteModal = useCallback(() => {\r\n        dispatch(deleteCard(card.id));\r\n    }, [dispatch, card]);\r\n\r\n    const handleCancelEdit = useCallback(() => {\r\n        setEditModalOpen(false);\r\n        setModalOpen(true);\r\n    }, []);\r\n\r\n    const handleOkEdit = useCallback(() => {\r\n        setEditModalOpen(true);\r\n    }, []);\r\n\r\n    const handleCancelOpen = useCallback(() => {\r\n        setModalOpen(false);\r\n        if (isChangedData) {\r\n            setEditModalOpen(true);\r\n        }\r\n    }, [isChangedData]);\r\n\r\n    return (\r\n        <>\r\n            <ThemedCard className={classes.card} onClick={handleCardClick} themecolor={theme.theme.card} ref={drag}>\r\n                <DeleteCardWrapper>\r\n                    <ThemeDeleteIcon onClick={handleDeleteCard} delete_color={theme.theme.error} />\r\n                </DeleteCardWrapper>\r\n                <CardContent>\r\n                    <CardTitle className={classes.title}>{card.title}</CardTitle>\r\n                    <ThemeCardTypography>{shortDescriptionValue}</ThemeCardTypography>\r\n                </CardContent>\r\n\r\n            </ThemedCard>\r\n            {modalOpen && !deleteModalOpen &&\r\n            <CardModal\r\n                card={card}\r\n                columnId={columnId}\r\n                onCancel={handleCancelOpen}\r\n                cardDescription={cardDescription}\r\n                cardTitle={cardTitle}\r\n                setCardDescription={setCardDescription}\r\n                setCardTitle={setCardTitle}\r\n            />\r\n            }\r\n\r\n            {deleteModalOpen &&\r\n            <DeleteConfirmModal onOk={onDeleteModal} onCancel={handleCancelDelete} setIsOpen={setDeleteModalOpen}>\r\n                <ThemeTypography>{t('deleteCardText')} {card.title}?</ThemeTypography>\r\n            </DeleteConfirmModal>}\r\n            {editModalOpen &&\r\n            <EditModalConfirm onCancel={handleCancelEdit} setIsOpen={setEditModalOpen} onOk={handleOkEdit}>\r\n                <ThemeTypography>{t('editCardText')}</ThemeTypography>\r\n            </EditModalConfirm>\r\n            }\r\n        </>\r\n    );\r\n};\r\n","import React, { FC, useCallback, useContext, useState } from 'react';\r\nimport { ColumnPaper, ColumnTitle, ColumnWrapper, HeaderWrapper, ThemeDeleteIcon } from './styles';\r\nimport { CardType, ColumnType } from '../../types';\r\nimport { Card } from '../Card';\r\nimport { ThemeContext } from '../../theme-context';\r\nimport { ThemeTypography } from '../ThemeTypography';\r\nimport { AddCard } from '../AddCard';\r\nimport { useDrop } from 'react-dnd';\r\nimport { useDispatch } from 'react-redux';\r\nimport { deleteColumn, updateCardColumn } from '../../redux-store/listReduser/actions';\r\nimport { DeleteConfirmModal } from '../DeleteConfirmModal';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\ntype Props = {\r\n    column: ColumnType,\r\n}\r\n\r\nexport const Column: FC<Props> = (props) => {\r\n\r\n    const { id, title, cards } = props.column;\r\n    const { t } = useTranslation();\r\n    const [deleteModalOpen, setDeleteModalOpen] = useState<boolean>(false);\r\n\r\n    const dispatch = useDispatch();\r\n    const themeContext = useContext(ThemeContext);\r\n    const [, drop] = useDrop({\r\n        accept: '1',\r\n        collect: (monitor) => ({\r\n            isOver: monitor.isOver(),\r\n            canDrop: monitor.canDrop(),\r\n        }),\r\n        drop: (item, monitor) => {\r\n            const card = monitor.getItem() as CardType;\r\n            if (card.columnId === id) {\r\n                return;\r\n            }\r\n            dispatch(updateCardColumn({ card, columnId: id }));\r\n            return undefined;\r\n        },\r\n    });\r\n\r\n    const handleDeleteColumn = useCallback(() => {\r\n        setDeleteModalOpen(true);\r\n    }, []);\r\n\r\n    const handleCancelDelete = useCallback(() => {\r\n        setDeleteModalOpen(false);\r\n    }, []);\r\n\r\n    const onDeleteModal = useCallback(() => {\r\n        dispatch(deleteColumn(id));\r\n    }, [dispatch, id]);\r\n\r\n    return (\r\n        <>\r\n            <ColumnWrapper ref={drop}>\r\n                <ColumnPaper elevation={3} bgColor={themeContext.theme.column}>\r\n                    <HeaderWrapper>\r\n                        <ColumnTitle>{title}</ColumnTitle>\r\n                        <div>\r\n                            <ThemeDeleteIcon onClick={handleDeleteColumn} delete_color={themeContext.theme.error} />\r\n                        </div>\r\n                    </HeaderWrapper>\r\n                    {cards.map(card => (\r\n                        <Card key={card.id} card={card} columnId={id} />),\r\n                    )}\r\n                    <AddCard columnId={id} />\r\n                </ColumnPaper>\r\n            </ColumnWrapper>\r\n\r\n            {deleteModalOpen &&\r\n            <DeleteConfirmModal onOk={onDeleteModal} onCancel={handleCancelDelete} setIsOpen={setDeleteModalOpen}>\r\n                <ThemeTypography>{t('deleteCardText')} {title}?</ThemeTypography>\r\n            </DeleteConfirmModal>}\r\n        </>\r\n    );\r\n};\r\n","import React, { ChangeEvent, FC, useCallback, useState } from 'react';\r\nimport { Modal } from '../Modal';\r\nimport { useDispatch } from 'react-redux';\r\nimport { uuidv4 } from '../../utils';\r\nimport { ColumnType } from '../../types';\r\nimport { addColumn } from '../../redux-store/listReduser/actions';\r\nimport { AddColumnModalProps } from './types';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Input } from '../Input';\r\n\r\nexport const AddColumnModal: FC<AddColumnModalProps> = ({ setIsOpen }) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { t } = useTranslation();\r\n\r\n    const [columnTitle, setColumnTitle] = useState<string>('');\r\n\r\n    const handleSave = useCallback(() => {\r\n        const uuid: string = uuidv4();\r\n        const newColumn: ColumnType = {\r\n            id: uuid,\r\n            title: columnTitle,\r\n            cards: [],\r\n        };\r\n        dispatch(addColumn(newColumn));\r\n    }, [columnTitle, dispatch]);\r\n\r\n    const onInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n        setColumnTitle(event.target.value);\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                setOpen={setIsOpen}\r\n                onCloseText={t('cancelText')}\r\n                onOkText={t('addColumnModalOkText')}\r\n                onOk={handleSave}\r\n                header={t('addColumnModalHeader')}\r\n            >\r\n               <Input label={t('addColumnTitle')}  name=\"columnTitle\" onChange={onInputChange}/>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n","import styled from 'styled-components';\r\nimport { ColumnPaper } from '../Column/styles';\r\n\r\nexport const AddCardWrapper = styled(ColumnPaper)`\r\n  cursor: pointer;\r\n  width: 150px;\r\n  margin: 0 0.7rem;\r\n`;\r\n","import React, { FC, useCallback, useContext, useState } from 'react';\r\nimport { AddColumnModal } from './AddColumnModal';\r\nimport { AddCardWrapper } from './styles';\r\nimport { ThemeTypography } from '../ThemeTypography';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { ThemeContext } from '../../theme-context';\r\n\r\nexport const AddNewColumn: FC = () => {\r\n\r\n    const [isOpen, setIsOpen] = useState<boolean>(false);\r\n\r\n    const { t } = useTranslation();\r\n    const themeContext = useContext(ThemeContext);\r\n\r\n    const handleClick = useCallback(() => {\r\n        setIsOpen(true);\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <AddCardWrapper\r\n                elevation={3}\r\n                onClick={handleClick}\r\n                bgColor={themeContext.theme.column}\r\n            >\r\n                <ThemeTypography>{t('addNewColumn')}</ThemeTypography>\r\n            </AddCardWrapper>\r\n            {isOpen && <AddColumnModal setIsOpen={setIsOpen} />}\r\n        </div>\r\n    );\r\n};\r\n","import React, { CSSProperties, FC } from 'react';\r\nimport { Column } from '../Column';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectors } from '../../redux-store';\r\nimport { AddNewColumn } from '../AddNewColumn';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\n\r\n\r\nexport const NotesContainer: FC = () => {\r\n\r\n    const columns = useSelector(selectors.list.columnList);\r\n\r\n    const styles: CSSProperties = {\r\n        display: 'flex'\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div style={styles}>\r\n                <DndProvider backend={HTML5Backend}>\r\n                    {\r\n                        columns.map(column => (<Column key={column.id} column={column} />))\r\n                    }\r\n                </DndProvider>\r\n                <AddNewColumn />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { CSSProperties, FC, useContext, useEffect } from 'react';\r\nimport { Header } from '../Header';\r\nimport { NotesContainer } from '../NotesContainer';\r\nimport { ThemeContext, themes } from '../../theme-context';\r\nimport { Footer } from '../Footer';\r\n\r\nconst TIME_DELTA = 10 * 1000;\r\n\r\n\r\nexport const MainPage: FC = () => {\r\n\r\n    const themeContext = useContext(ThemeContext);\r\n\r\n    const wrapperStyles: CSSProperties  = {\r\n        backgroundColor: themeContext.theme.background,\r\n        position: 'fixed',\r\n        height: '100%',\r\n        width: '100%',\r\n        top: 0,\r\n        overflowX: 'auto',\r\n    }\r\n    const containerStyles: CSSProperties = {\r\n        marginTop: '6rem'\r\n    }\r\n\r\n    // useEffect(() => {\r\n    //     const timer = setInterval(() => {\r\n    //         const date = new Date();\r\n    //         //refactor\r\n    //         if (date.getHours() > 18 || date.getHours() < 6) {\r\n    //             themeContext.setTheme(themes.dark);\r\n    //         } else {\r\n    //             themeContext.setTheme(themes.light);\r\n    //         }\r\n    //     }, TIME_DELTA);\r\n    // }, [themeContext]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div style={wrapperStyles}>\r\n                <div style={containerStyles}>\r\n                    <NotesContainer />\r\n                </div>\r\n            </div>\r\n            {\r\n                //<Footer />\r\n            }\r\n\r\n\r\n        </>\r\n    );\r\n};\r\n","import React, { useCallback, useState } from 'react';\nimport { MainPage } from './components/MainPage';\nimport { ThemeContext, themes } from './theme-context';\nimport { ThemeFields } from './theme';\n\n\nfunction App() {\n\n    const [themeState, setThemeState] = useState<ThemeFields>(themes.light);\n\n    const toggleThemeHandler = useCallback(() => {\n        setThemeState(themeState === themes.light ? themes.dark : themes.light);\n    }, [themeState]);\n\n    const setTheme = useCallback((theme: ThemeFields) => {\n        setThemeState(theme)\n    }, [])\n\n    return (\n        <ThemeContext.Provider value={{ theme: themeState, setTheme: setTheme, toggleTheme: toggleThemeHandler, autoThemeChange: true }}>\n            <MainPage />\n        </ThemeContext.Provider>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\nimport Backend from 'i18next-http-backend'\r\nimport LanguageDetector from 'i18next-browser-languagedetector'\r\n\r\ni18n\r\n    .use(Backend)\r\n    .use(LanguageDetector)\r\n    .use(initReactI18next) // passes i18n down to react-i18next\r\n    .init({\r\n        lng: 'en',\r\n        detection: {\r\n            order: ['queryString', 'cookie'],\r\n            cache: ['cookie']\r\n        },\r\n        debug: true,\r\n        interpolation: {\r\n            escapeValue: false // react already safes from xss\r\n        }\r\n    });\r\n\r\nexport default i18n;\r\n","import { applyMiddleware, createStore, Middleware } from 'redux';\r\nimport { logger } from 'redux-logger';\r\nimport { rootReducer } from './redux-store';\r\nimport { persistReducer, persistStore } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\r\nimport thunk from 'redux-thunk';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    debug: true,\r\n};\r\n\r\nconst persistedReducers = persistReducer(persistConfig, rootReducer);\r\n\r\nconst middlewares: Middleware[] = [logger, thunk];\r\n\r\n\r\nconst store = createStore(persistedReducers, applyMiddleware(...middlewares));\r\nconst persistor = persistStore(store);\r\nexport { store, persistor };\r\n\r\n","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './i18n';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { persistor, store } from './store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Suspense fallback={<div>Loading...</div>}>\n            <Provider store={store}>\n                <PersistGate loading={null} persistor={persistor}>\n                    <App />\n                </PersistGate>\n            </Provider>\n        </Suspense>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export enum ListActionType {\r\n    ADD_NEW_CARD = 'ADD_NEW_CARD',\r\n    ADD_NEW_COLUMN = 'ADD_NEW_COLUMN ',\r\n    UPDATE_CARD = 'UPDATE_CARD',\r\n    UPDATE_CARD_COLUMN = 'UPDATE_CARD_COLUMN',\r\n    DELETE_COLUMN = 'DELETE_COLUMN',\r\n    DELETE_CARD = 'DELETE_CARD',\r\n}\r\n","import { Action } from 'redux';\r\nimport { CardType, ColumnType } from '../../types';\r\nimport { ListActionType } from './types';\r\n\r\nexport interface UpdateColumnListAction extends Action<ListActionType.ADD_NEW_COLUMN> {\r\n    payload: ColumnType\r\n}\r\n\r\nexport const updateColumnsList = (column: ColumnType): UpdateColumnListAction => ({\r\n    payload: column,\r\n    type: ListActionType.ADD_NEW_COLUMN,\r\n});\r\n\r\n\r\nexport interface UpdateCardAction extends Action<ListActionType.UPDATE_CARD> {\r\n    payload: CardType\r\n}\r\n\r\nexport const updateCard = (card: CardType): UpdateCardAction => ({\r\n    payload: card,\r\n    type: ListActionType.UPDATE_CARD,\r\n});\r\n\r\nexport interface AddNewColumnAction extends Action<ListActionType.ADD_NEW_COLUMN> {\r\n    payload: ColumnType;\r\n}\r\n\r\nexport const addColumn = (column: ColumnType): AddNewColumnAction => ({\r\n    payload: column,\r\n    type: ListActionType.ADD_NEW_COLUMN,\r\n});\r\n\r\n\r\nexport interface AddNewCardAction extends Action<ListActionType.ADD_NEW_CARD> {\r\n    payload: CardType;\r\n}\r\n\r\nexport const addCard = (card: CardType): AddNewCardAction => ({\r\n    payload: card,\r\n    type: ListActionType.ADD_NEW_CARD,\r\n});\r\n\r\n\r\nexport interface UpdateCardColumnAction extends Action<ListActionType.UPDATE_CARD_COLUMN> {\r\n    payload: { card: CardType, columnId: string };\r\n}\r\n\r\nexport const updateCardColumn = (updateCardColumnType: { card: CardType, columnId: string }): UpdateCardColumnAction => ({\r\n    payload: updateCardColumnType,\r\n    type: ListActionType.UPDATE_CARD_COLUMN,\r\n});\r\n\r\nexport interface DeleteColumnAction extends Action<ListActionType.DELETE_COLUMN> {\r\n    payload: string;\r\n}\r\n\r\nexport const deleteColumn = (columnId: string): DeleteColumnAction => ({\r\n    payload: columnId,\r\n    type: ListActionType.DELETE_COLUMN,\r\n});\r\n\r\nexport interface DeleteCardAction extends Action<ListActionType.DELETE_CARD> {\r\n    payload: string;\r\n}\r\n\r\nexport const deleteCard = (cardId: string): DeleteCardAction => ({\r\n    payload: cardId,\r\n    type: ListActionType.DELETE_CARD,\r\n});\r\n","import styled from 'styled-components';\r\n\r\n\r\nexport const ModalShadow = styled.div`\r\n  position: fixed;\r\n  height: 100%;\r\n  width: 100%;\r\n  top: 0;\r\n  background-color: black;\r\n  opacity: 0.45;\r\n  z-index: 4;\r\n`;\r\ntype Props = {\r\n    backgroundColor: string\r\n}\r\n\r\nexport const Modal = styled.div<Props>`\r\n  min-width: 500px;\r\n  margin: 0 auto;\r\n  background: ${props => props.backgroundColor};;\r\n  z-index: 1000;\r\n  position: fixed;\r\n  top: 15%;\r\n  border-radius: 3px;\r\n`;\r\n\r\n\r\nexport const ModalWrapper = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  top: 0;\r\n  \r\n`;\r\n\r\nexport const Header = styled.div`\r\n  padding: 1rem 2rem;\r\n  border-bottom: 1px silver solid;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  padding: 1rem 2rem;\r\n`;\r\n\r\nexport const Footer = styled.div`\r\n  border-top: 1px silver solid;\r\n  padding: 1rem 2rem;\r\n`;\r\n\r\n","import styled from 'styled-components';\r\nimport { CloseButtonWrapperProps } from './types';\r\n\r\nexport const CloseButtonWrapper = styled.span<CloseButtonWrapperProps>`\r\n    float: right;\r\n    color: ${props => props.themeColor};\r\n    :hover {\r\n      cursor: pointer;\r\n    }\r\n`;\r\n","import React, { FC, useCallback, useContext } from 'react';\r\nimport { CloseButtonProps } from './types';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { CloseButtonWrapper } from './styles';\r\nimport { ThemeContext } from '../../theme-context';\r\n\r\nexport const CloseButton: FC<CloseButtonProps> = ({ onClick}) => {\r\n\r\n    const handleClick = useCallback((e: React.MouseEvent<HTMLElement>) => {\r\n        onClick?.(e);\r\n    }, [onClick])\r\n\r\n    const theme = useContext(ThemeContext)\r\n\r\n    return (\r\n        <CloseButtonWrapper onClick={handleClick} themeColor={theme.theme.on_surface}>\r\n            <CloseIcon />\r\n        </CloseButtonWrapper>\r\n    );\r\n}\r\n","import styled from 'styled-components';\r\nimport { Button } from '@material-ui/core';\r\nimport { ButtonStyleProps } from './types';\r\n\r\nexport const StyledButton = styled(Button)<ButtonStyleProps>`\r\n  color: ${props => props.themecolor};\r\n  border-color: ${props => props.themecolor};\r\n  margin: 0.2rem;\r\n`;\r\n","import React, { FC, useCallback, useContext } from 'react';\r\nimport { ButtonProps } from './types';\r\nimport { StyledButton } from './styles';\r\nimport { ThemeContext } from '../../theme-context';\r\n\r\nexport const Button: FC<ButtonProps> = (props) => {\r\n\r\n    const { onClick, children, buttonColor } = props;\r\n\r\n    const handleClick = useCallback((e: React.MouseEvent<HTMLElement>) => {\r\n        onClick?.(e);\r\n    }, [onClick]);\r\n\r\n    const theme = useContext(ThemeContext);\r\n    const btnColor = buttonColor ?? theme.theme.primary;\r\n\r\n    return (\r\n        <>\r\n            <StyledButton\r\n                variant='outlined'\r\n                size='small'\r\n                onClick={handleClick}\r\n                themecolor={btnColor}\r\n            >\r\n                {children}\r\n            </StyledButton>\r\n        </>\r\n    );\r\n};\r\n","import React, { FC, useCallback, useContext } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Content, Footer, Header, Modal as StyledModal, ModalShadow, ModalWrapper } from './styles';\r\nimport { ThemeContext } from '../../theme-context';\r\nimport { ThemeTypography } from '../ThemeTypography';\r\nimport { ModalProps } from './types';\r\nimport { CloseButton } from '../CloseButton';\r\nimport { Button } from '../Buttons';\r\n\r\n\r\nexport const Modal: FC<ModalProps> = (props) => {\r\n\r\n    const { children, setOpen, onOk, onClose, header, onCloseText, onOkText } = props;\r\n\r\n    const handleClose = useCallback((e: React.MouseEvent<HTMLElement>) => {\r\n        onClose?.(e);\r\n        setOpen(false);\r\n    }, [setOpen, onClose]);\r\n\r\n    const handleSubmit = useCallback((e: React.MouseEvent<HTMLElement>) => {\r\n        onOk?.(e);\r\n        setOpen(false);\r\n    }, [onOk, setOpen]);\r\n\r\n\r\n    const theme = useContext(ThemeContext);\r\n\r\n    return ReactDOM.createPortal(\r\n        <>\r\n            <ModalShadow onClick={handleClose} />\r\n            <ModalWrapper>\r\n                <StyledModal backgroundColor={theme.theme.surface}>\r\n                    <Header>\r\n                        <ThemeTypography>\r\n                            {header}\r\n                        </ThemeTypography>\r\n                        <CloseButton onClick={handleClose} />\r\n                    </Header>\r\n                    <Content>\r\n                        {children}\r\n                    </Content>\r\n                    <Footer>\r\n                        <Button onClick={handleClose} buttonColor={theme.theme.error}>{onCloseText}</Button>\r\n                        <Button onClick={handleSubmit} buttonColor={theme.theme.primary}>{onOkText}</Button>\r\n                    </Footer>\r\n                </StyledModal>\r\n            </ModalWrapper>\r\n        </>\r\n        , document.body);\r\n};\r\n","export enum AdActionType {\r\n    LOADING= 'LOADING',\r\n    ADD_AD = 'ADD_AD',\r\n    REMOVE_ADS = 'REMOVE_ADS',\r\n    UPDATE_DISPLAYED_AD = 'UPDATE_DISPLAYED_AD',\r\n}\r\n","export * from './AdBlock';\r\nexport * from './types';\r\nexport * from './styles';\r\n","import { RootState } from './rootReducer';\r\nimport { ColumnType } from '../types';\r\nimport { AdType } from './adReducer/reducer';\r\n\r\nexport const list = {\r\n    columnList: (state: RootState): ColumnType[] => state.listReducer.list,\r\n};\r\n\r\nexport const ad = {\r\n    adList: (state: RootState): AdType[] => state.adReducer.ads,\r\n    adLoading: (state: RootState): boolean => state.adReducer.loading,\r\n    displayed: (state: RootState): AdType | null => state.adReducer.displayed,\r\n};\r\n\r\n","import { CardType, ColumnType } from '../../types';\r\nimport { ListActionType } from './types';\r\nimport { AnyAction } from 'redux';\r\n\r\ntype ColumnsStore = {\r\n    list: ColumnType[];\r\n}\r\n\r\nconst initialState: ColumnsStore = {\r\n    list: [],\r\n};\r\n\r\nexport const listReducer = (\r\n    state = initialState,\r\n    action: AnyAction,\r\n): ColumnsStore => {\r\n    console.log(state.list);\r\n    switch (action.type) {\r\n        case ListActionType.ADD_NEW_COLUMN:\r\n            return {\r\n                ...state,\r\n                list: [...state.list, action.payload],\r\n            };\r\n        case ListActionType.ADD_NEW_CARD:\r\n            const newList = state.list.map(column => {\r\n                if (column.id === action.payload.columnId) {\r\n                    const newCards = [...column.cards, action.payload];\r\n                    return { ...column, cards: newCards };\r\n                }\r\n                return column;\r\n            });\r\n            return {\r\n                ...state,\r\n                list: newList,\r\n            };\r\n        case ListActionType.UPDATE_CARD:\r\n            const newCards = state.list.map(column => {\r\n                //find column\r\n                if (column.id === action.payload.columnId) {\r\n                    //find card\r\n                    const cards = column.cards.map(card => {\r\n                        if (card.id === action.payload.id) {\r\n                            const newCard: CardType = {\r\n                                id: card.id,\r\n                                columnId: card.columnId,\r\n                                title: action.payload.title,\r\n                                description: action.payload.description,\r\n                            };\r\n                            return newCard;\r\n                        }\r\n                        return card;\r\n                    });\r\n                    return { ...column, cards: cards };\r\n                }\r\n                return column;\r\n            });\r\n            return {\r\n                ...state,\r\n                list: newCards,\r\n            };\r\n        case ListActionType.UPDATE_CARD_COLUMN:\r\n            const prevColumnId = action.payload.card.columnId;\r\n            const columns = state.list.map(column => {\r\n                if (column.id === prevColumnId) {\r\n                    const cards = column.cards.filter(card => card.id !== action.payload.card.id);\r\n                    return { ...column, cards: cards };\r\n                }\r\n\r\n                if (column.id === action.payload.columnId) {\r\n                    const changedCard = action.payload.card;\r\n                    changedCard.columnId = action.payload.columnId;\r\n                    const cards = [...column.cards, changedCard];\r\n                    return { ...column, cards: cards };\r\n                }\r\n                return column;\r\n            });\r\n            return {\r\n                ...state,\r\n                list: columns,\r\n            };\r\n        case ListActionType.DELETE_COLUMN:\r\n            const filteredColumns = state.list.filter(column => column.id !== action.payload);\r\n            return {\r\n                ...state,\r\n                list: filteredColumns,\r\n            };\r\n\r\n        case ListActionType.DELETE_CARD:\r\n            const columnsFiltered = state.list.map(column => {\r\n                const cards = column.cards.filter(card => card.id !== action.payload);\r\n                return {\r\n                    ...column,\r\n                    cards: cards,\r\n                };\r\n            });\r\n            return {\r\n                ...state,\r\n                list: columnsFiltered,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { AnyAction } from 'redux';\r\nimport { AdActionType } from './types';\r\n\r\nexport type AdType = {\r\n    id: number,\r\n    title: string,\r\n    body: string,\r\n}\r\n\r\ntype AdStore = {\r\n    ads: AdType[],\r\n    loading: boolean,\r\n    displayed: AdType | null,\r\n}\r\n\r\n\r\nconst initialState: AdStore = {\r\n    ads: [],\r\n    loading: false,\r\n    displayed: null,\r\n};\r\n\r\nexport const adReducer = (state = initialState, action: AnyAction): AdStore => {\r\n    console.log(state.ads);\r\n    switch (action.type) {\r\n        case AdActionType.LOADING:\r\n            return {\r\n                ...state,\r\n                loading: action.payload,\r\n            };\r\n\r\n        case AdActionType.ADD_AD:\r\n            return {\r\n                ...state,\r\n                ads: [...state.ads, action.payload],\r\n            };\r\n        case AdActionType.REMOVE_ADS:\r\n            return {\r\n                ...state,\r\n                ads: [],\r\n                displayed: null,\r\n            };\r\n        case AdActionType.UPDATE_DISPLAYED_AD: {\r\n            return {\r\n                ...state,\r\n                displayed: action.payload,\r\n            };\r\n        }\r\n        default:\r\n            return { ...state };\r\n    }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { listReducer } from './listReduser/reducer';\r\nimport { adReducer } from './adReducer/reducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    listReducer: listReducer,\r\n    adReducer: adReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n","export function uuidv4(): string {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n        let r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n        return v.toString(16);\r\n    });\r\n}\r\n","export function getRandomInt(min: number, max: number): number {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\n","import styled from 'styled-components';\r\nimport { InputStylesType, LabelStylesType } from './types';\r\nimport { TextareaAutosize } from '@material-ui/core';\r\n\r\nexport const StyledInput = styled.input<InputStylesType>`\r\n  border-color: ${props => props.borderColor};\r\n  background-color: ${props => props.backgroundcolor};\r\n  color: ${props => props.color};\r\n  border-style: solid;\r\n  border-radius: 3px;\r\n  border-width: 1px;\r\n  padding: 0.2rem;\r\n  width: 200px;\r\n`;\r\n\r\nexport const StyledTextArea = styled(TextareaAutosize)<InputStylesType>`\r\n  border-color: ${props => props.borderColor};\r\n  background-color: ${props => props.backgroundcolor};\r\n  color: ${props => props.color};\r\n  border-style: solid;\r\n  border-radius: 2px;\r\n  border-width: 1px;\r\n  padding: 0.2rem;\r\n  width: 200px;\r\n`;\r\n\r\nexport const StyledLabel = styled.label<LabelStylesType>`\r\n  color: ${props => props.color};\r\n  display: block;\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  margin-bottom: 1rem;\r\n`;\r\n","export * from './language';\r\nexport * from './column';\r\nexport * from './card';\r\n","export * from './types';\r\nexport * from './Input';\r\nexport * from './TextArea';\r\n","import AutorenewIcon from '@material-ui/icons/Autorenew';\r\nimport styled, { keyframes } from 'styled-components';\r\nimport { LoadingIconType } from './types';\r\n\r\nconst keyFrames = keyframes`\r\n  100% {\r\n    transform: rotate(360deg)\r\n  }\r\n`;\r\n\r\nexport const LoadingIcon = styled(AutorenewIcon)<LoadingIconType>`\r\n  animation: ${keyFrames} 2s infinite;\r\n`;\r\n","export * from './CardForm';\r\nexport * from './types';\r\n","export * from './types';\r\nexport * from './DeleteConfirmModal';\r\n","export * from './type';\r\nexport * from './themes';\r\n"],"sourceRoot":""}